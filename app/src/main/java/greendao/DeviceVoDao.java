package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.nader.intelligent.entity.vo.DeviceVo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_VO".
*/
public class DeviceVoDao extends AbstractDao<DeviceVo, Long> {

    public static final String TABLENAME = "DEVICE_VO";

    /**
     * Properties of entity DeviceVo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property TableId = new Property(0, Long.class, "tableId", true, "tableId");
        public final static Property Id = new Property(1, String.class, "id", false, "id");
        public final static Property SerialNumber = new Property(2, String.class, "serialNumber", false, "serialNumber");
        public final static Property Name = new Property(3, String.class, "name", false, "name");
        public final static Property ProductKey = new Property(4, String.class, "productKey", false, "productKey");
        public final static Property IotId = new Property(5, String.class, "iotId", false, "iotId");
        public final static Property DeviceName = new Property(6, String.class, "deviceName", false, "deviceName");
    }


    public DeviceVoDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceVoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_VO\" (" + //
                "\"tableId\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: tableId
                "\"id\" TEXT," + // 1: id
                "\"serialNumber\" TEXT," + // 2: serialNumber
                "\"name\" TEXT," + // 3: name
                "\"productKey\" TEXT," + // 4: productKey
                "\"iotId\" TEXT," + // 5: iotId
                "\"deviceName\" TEXT);"); // 6: deviceName
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_DEVICE_VO_iotId ON \"DEVICE_VO\"" +
                " (\"iotId\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_VO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceVo entity) {
        stmt.clearBindings();
 
        Long tableId = entity.getTableId();
        if (tableId != null) {
            stmt.bindLong(1, tableId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String serialNumber = entity.getSerialNumber();
        if (serialNumber != null) {
            stmt.bindString(3, serialNumber);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String productKey = entity.getProductKey();
        if (productKey != null) {
            stmt.bindString(5, productKey);
        }
 
        String iotId = entity.getIotId();
        if (iotId != null) {
            stmt.bindString(6, iotId);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(7, deviceName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceVo entity) {
        stmt.clearBindings();
 
        Long tableId = entity.getTableId();
        if (tableId != null) {
            stmt.bindLong(1, tableId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        String serialNumber = entity.getSerialNumber();
        if (serialNumber != null) {
            stmt.bindString(3, serialNumber);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String productKey = entity.getProductKey();
        if (productKey != null) {
            stmt.bindString(5, productKey);
        }
 
        String iotId = entity.getIotId();
        if (iotId != null) {
            stmt.bindString(6, iotId);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(7, deviceName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeviceVo readEntity(Cursor cursor, int offset) {
        DeviceVo entity = new DeviceVo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // tableId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // serialNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // productKey
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // iotId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // deviceName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceVo entity, int offset) {
        entity.setTableId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSerialNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProductKey(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIotId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDeviceName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeviceVo entity, long rowId) {
        entity.setTableId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeviceVo entity) {
        if(entity != null) {
            return entity.getTableId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceVo entity) {
        return entity.getTableId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
